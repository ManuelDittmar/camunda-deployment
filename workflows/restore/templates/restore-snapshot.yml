apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: restore-snapshot
spec:
  templates:
  - name: restore-snapshot
    inputs:
      parameters:
      - name: elasticsearch-endpoint
      - name: backup-time-id
      - name: repository
    container:
      image: curlimages/curl
      command: ["/bin/sh"]
      args:
      - -c
      - |
        #!/bin/sh
        
        # Define Elasticsearch endpoint from input parameter
        elasticsearch_endpoint="{{inputs.parameters.elasticsearch-endpoint}}"
        
        # Define backup time ID from input parameter
        BACKUP_TIME_ID="{{inputs.parameters.backup-time-id}}"
        
        # Define the repository name from input parameter
        repository="{{inputs.parameters.repository}}"
        
        echo "Processing repository: $repository"
        
        # Query Elasticsearch for all snapshots in the repository
        response=$(curl -s "$elasticsearch_endpoint/_snapshot/$repository/_all")

        # Attempt to extract snapshot names that include the BACKUP_TIME_ID. This uses a simplistic method with grep and cut.
        # Note: This method relies on the snapshot names being in a specific format in the response.
        echo "$response" | grep -o "\"snapshot\":\"[^\"]*$BACKUP_TIME_ID[^\"]*\"" | cut -d':' -f2 | tr -d '"' | while read -r snapshot; do
          if [ -n "$snapshot" ]; then
            echo "Found snapshot matching criteria: $snapshot in $repository"
            # Restore the found snapshot
            echo "Restoring snapshot: $snapshot in repository: $repository"
            curl --request POST "$elasticsearch_endpoint/_snapshot/$repository/$snapshot/_restore?wait_for_completion=true"
            echo "Restore initiated for snapshot: $snapshot in repository: $repository"
          else
            echo "No matching snapshots found in repository $repository."
          fi
        done
        
        echo "Restore operations for the repository $repository completed."
    restartPolicy: OnFailure